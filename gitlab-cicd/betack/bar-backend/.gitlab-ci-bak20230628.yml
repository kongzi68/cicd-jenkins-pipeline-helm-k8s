stages:
  - message
  - test
  - check


image: gradle:7.6.0-jdk11-alpine


variables:
  GIT_CLEAN_FLAGS: -ffdx -e .gradle/
  GIT_CLONE_PATH: ${CI_BUILDS_DIR}builds/$CI_PROJECT_NAMESPACE/$CI_CONCURRENT_ID/$CI_PROJECT_NAME


before_script:
  - echo "${GIT_CLONE_PATH}"
  - export GRADLE_USER_HOME=$GIT_CLONE_PATH/.gradle
  - export CI_CACHE=true
  - rm -f ${GRADLE_USER_HOME}/caches/modules-*/modules-*.lock
  - rm -fr ${GRADLE_USER_HOME}/caches/*/plugin-resolution/


after_script:
  - echo 'done...'


cache:
  key: one-key-to-rull-them-all
  paths:
    - .gradle/wrapper
    - .gradle/caches


unit_test:
  script:
    - ./gradlew test --stacktrace
    # - ./gradlew scalaTest
    # - ./gradlew test --info
  stage: test
  except:
    - master
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    when: on_failure
    expose_as: 'artifact 1'
    expire_in: 2 hrs
    paths:
      - './'
    reports:
      junit: '*/build/reports/tests/test/index.html'


sonarqube-test:
  stage: test
  #image: gradle:7-jdk16-openj9
  variables:
    ##↓ 有效 by colin on 20230626，单元测试与sonar覆盖测试分离代码目录，否则会相互冲突
    GIT_CLONE_PATH: ${CI_BUILDS_DIR}builds/$CI_PROJECT_NAMESPACE/sonarqube_$CI_CONCURRENT_ID/$CI_PROJECT_NAME
    ##↓ 针对非常大的项目存储库，git 调试跟踪
    # CI_PRE_CLONE_SCRIPT: "git config --global http.postBuffer 5368709120 \n export GIT_TRACE_PACKET=1 \n export GIT_TRACE=1 \n export GIT_CURL_VERBOSE=1"
    CI_PRE_CLONE_SCRIPT: "git config --global http.postBuffer 5368709120"
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    ##↓ 参考文档：
    #+ GIT_DEPTH=0 does not work as expected, it does not unshallow git history, https://gitlab.com/gitlab-org/gitlab/-/issues/292470
    #+ fatal: early EOF fatal: index-pack failed, https://stackoverflow.com/questions/21277806/fatal-early-eof-fatal-index-pack-failed
    #+ GIT_DEPTH: 0 不起作用问题？？？
    # GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    # GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
    # GIT_DEPTH: 0 # avoid shallow clone to give sonar all the info it needs
    GIT_DEPTH: 2147483647
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  #↓ 延迟1分钟运行
  when: delayed
  start_in: '1 minutes'
  script:
    - gradle sonarqube --stacktrace -Dsonar.qualitygate.wait=true -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=rab_backend


check:
  stage: check
  script:
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/ /+/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/%/%25/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/#/%23/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/&/%26/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/=/%3D/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/@/%40/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/</%3c/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/>/%3e/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/\[/%5B/g'`
    - CI_COMMIT_MESSAGE=`echo $CI_COMMIT_MESSAGE|sed 's/\]/%5D/g'`
  when: on_failure


message:
  stage: message
  script:
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_MESSAGE|awk -F '^' '{print $(NF-1)}'`
    - echo "CI_COMMIT_MESSAGE="$CI_COMMIT_MESSAGE
    - echo "CI_BUILD_REF="$CI_BUILD_REF
    - echo "CI_BUILD_REF_NAME="$CI_BUILD_REF_NAME
    - echo "CI_COMMIT_BRANCHz="$CI_COMMIT_BRANCHz
    - echo "GITLAB_USER_NAME="$GITLAB_USER_NAME
    - echo "CI_COMMIT_BRANCH="$CI_COMMIT_BRANCH
    - echo "CI_PROJECT_NAME="$CI_PROJECT_NAME
    - echo "CI_PIPELINE_ID="$CI_PIPELINE_ID
    - echo "CI_JOB_URL="$CI_JOB_URL
    - echo "CI_PIPELINE_URL"=$CI_PIPELINE_URL
    - echo "CI_PROJECT_URL"=$CI_PROJECT_URL
    - CI_PROJECT_URLz=`echo $CI_PROJECT_URL|awk -F '//' '{print $2}'`
    - echo "CI_PROJECT_URLz="$CI_PROJECT_URLz
    - echo "CI_PROJECT_NAMESPACE="$CI_PROJECT_NAMESPACE
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/ /+/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/%/%25/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/#/%23/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/&/%26/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/=/%3D/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/@/%40/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/</%3c/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/>/%3e/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/\[/%5B/g'`
    - CI_COMMIT_BRANCHz=`echo $CI_COMMIT_BRANCHz|sed 's/\]/%5D/g'`
  when: on_success
